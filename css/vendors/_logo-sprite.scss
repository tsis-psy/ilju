// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$logo-image-only-2x-name: 'logo-image-only-2x';
$logo-image-only-2x-x: 203px;
$logo-image-only-2x-y: 103px;
$logo-image-only-2x-offset-x: -203px;
$logo-image-only-2x-offset-y: -103px;
$logo-image-only-2x-width: 182px;
$logo-image-only-2x-height: 136px;
$logo-image-only-2x-total-width: 460px;
$logo-image-only-2x-total-height: 428px;
$logo-image-only-2x-image: '@@img/sprite/logo.png';
$logo-image-only-2x: (203px, 103px, -203px, -103px, 182px, 136px, 460px, 428px, '@@img/sprite/logo.png', 'logo-image-only-2x', );
$logo-m-image-only-name: 'logo-m-image-only';
$logo-m-image-only-x: 0px;
$logo-m-image-only-y: 336px;
$logo-m-image-only-offset-x: 0px;
$logo-m-image-only-offset-y: -336px;
$logo-m-image-only-width: 120px;
$logo-m-image-only-height: 92px;
$logo-m-image-only-total-width: 460px;
$logo-m-image-only-total-height: 428px;
$logo-m-image-only-image: '@@img/sprite/logo.png';
$logo-m-image-only: (0px, 336px, 0px, -336px, 120px, 92px, 460px, 428px, '@@img/sprite/logo.png', 'logo-m-image-only', );
$logo-m-with-text-name: 'logo-m-with-text';
$logo-m-with-text-x: 0px;
$logo-m-with-text-y: 256px;
$logo-m-with-text-offset-x: 0px;
$logo-m-with-text-offset-y: -256px;
$logo-m-with-text-width: 340px;
$logo-m-with-text-height: 70px;
$logo-m-with-text-total-width: 460px;
$logo-m-with-text-total-height: 428px;
$logo-m-with-text-image: '@@img/sprite/logo.png';
$logo-m-with-text: (0px, 256px, 0px, -256px, 340px, 70px, 460px, 428px, '@@img/sprite/logo.png', 'logo-m-with-text', );
$logo-mono-name: 'logo-mono';
$logo-mono-x: 0px;
$logo-mono-y: 103px;
$logo-mono-offset-x: 0px;
$logo-mono-offset-y: -103px;
$logo-mono-width: 193px;
$logo-mono-height: 143px;
$logo-mono-total-width: 460px;
$logo-mono-total-height: 428px;
$logo-mono-image: '@@img/sprite/logo.png';
$logo-mono: (0px, 103px, 0px, -103px, 193px, 143px, 460px, 428px, '@@img/sprite/logo.png', 'logo-mono', );
$logo-with-text-2x-name: 'logo-with-text-2x';
$logo-with-text-2x-x: 0px;
$logo-with-text-2x-y: 0px;
$logo-with-text-2x-offset-x: 0px;
$logo-with-text-2x-offset-y: 0px;
$logo-with-text-2x-width: 460px;
$logo-with-text-2x-height: 93px;
$logo-with-text-2x-total-width: 460px;
$logo-with-text-2x-total-height: 428px;
$logo-with-text-2x-image: '@@img/sprite/logo.png';
$logo-with-text-2x: (0px, 0px, 0px, 0px, 460px, 93px, 460px, 428px, '@@img/sprite/logo.png', 'logo-with-text-2x', );
$logo-width: 460px;
$logo-height: 428px;
$logo-image: '@@img/sprite/logo.png';
$logo-sprites: ($logo-image-only-2x, $logo-m-image-only, $logo-m-with-text, $logo-mono, $logo-with-text-2x, );
$logo: (460px, 428px, '@@img/sprite/logo.png', $logo-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
